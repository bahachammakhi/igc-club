{"version":3,"sources":["components/layout/Header.jsx","components/layout/ResponsiveHeader/SideNav/SideNav.jsx","components/layout/ResponsiveHeader/ResponsiveHeader.jsx","components/layout/WithLayoutRoute.jsx","containers/homeContainer/HomeContainer.jsx","containers/RootContainer.jsx","App.js","serviceWorker.js","index.js","components/layout/logo.jpg"],"names":["objnav","Header","match","content","map","post","to","className","style","textDecoration","src","Logo","href","type","withRouter","navitems","setOpen","navlinks","item","path","color","backgroundColor","borderRadius","fontSize","padding","onClick","position","bottom","textAlign","ResponsiveHeader","useState","opened","setOpened","fontWeight","fontStyle","target","cursor","paddingLeft","right","logo","width","alt","height","WithLayoutRoute","props","state","setState","console","log","window","innerWidth","onresize","HomeContainer","RootContainer","history","exact","component","App","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.abe205c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./header.css\";\r\nimport Logo from \"./logo.jpg\";\r\nimport { Icon } from \"antd\";\r\nconst objnav = [\r\n  \"Home\",\r\n  \"Contact\",\r\n  \"Notre équipe\",\r\n  \"Qui sommes-nous\",\r\n  \"Evénements\"\r\n];\r\n\r\nconst Header = ({ match }) => {\r\n  const content = objnav.map(post => (\r\n    <Link to=\"first\" className=\"nav-btn\" style={{ textDecoration: \"none\" }}>\r\n      {post}\r\n    </Link>\r\n  ));\r\n  return (\r\n    <div className=\"header\">\r\n      <img className=\"logo\" src={Logo}></img>\r\n      <div className=\"cn-btn\">\r\n        {content}\r\n        <div className=\"media\">\r\n          <a href=\"http://www.google.com\">\r\n            <Icon type=\"facebook\" className=\"logo-media\"  />\r\n          </a>\r\n          <a href=\"http://www.google.com\">\r\n            <Icon type=\"twitter\" className=\"logo-media\" />\r\n          </a>\r\n          <a href=\"http://www.google.com\">\r\n            <Icon type=\"instagram\" className=\"logo-media\"  />{\" \"}\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { setState } from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { Icon } from \"antd\";\r\n\r\nimport \"./sidenav.style.scss\";\r\nconst SideNav = ({ navitems, match, setOpen }) => {\r\n  const navlinks = navitems.map(item => {\r\n    if (item === \"About\" && match.path === \"/\") {\r\n      return (\r\n        <Link\r\n          className=\"nav-item\"\r\n          style={{\r\n            color: \"#4285F4\",\r\n            textDecoration: \"none\",\r\n            backgroundColor: \"#d3f0ec\",\r\n            borderRadius: \"5px\"\r\n          }}\r\n        >\r\n          {item}\r\n        </Link>\r\n      );\r\n    }\r\n    if (item !== match.path) {\r\n      return (\r\n        <Link\r\n          className=\"nav-item\"\r\n          style={{ color: \"black\", textDecoration: \"none\" }}\r\n        >\r\n          {item}\r\n        </Link>\r\n      );\r\n    } else {\r\n      return (\r\n        <Link\r\n          className=\"nav-item\"\r\n          style={{\r\n            color: \"#4285F4\",\r\n            textDecoration: \"none\",\r\n            backgroundColor: \"#d3f0ec\",\r\n            borderRadius: \"5px\"\r\n          }}\r\n        >\r\n          {item}\r\n        </Link>\r\n      );\r\n    }\r\n  });\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Icon\r\n        type=\"close\"\r\n        style={{ fontSize: \"20px\", padding: \"20px\" }}\r\n        onClick={() => {\r\n          setOpen(false);\r\n        }}\r\n      />\r\n      {navlinks}\r\n\r\n      <div>\r\n        <hr />\r\n        <span\r\n          style={{\r\n            color: \"#4285F4\",\r\n            position: \"relative\",\r\n            bottom: \"0px\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          Check our events\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(SideNav);\r\n","import React, { useState } from \"react\";\r\nimport { Icon } from \"antd\";\r\n\r\n//Components\r\nimport SideNav from \"./SideNav/SideNav\";\r\nimport \"./responsiveHeader-style.scss\";\r\nimport logo from \"../logo.jpg\";\r\n\r\nconst ResponsiveHeader = () => {\r\n  const [opened, setOpened] = useState(false);\r\n  return (\r\n    <div className=\"nav\">\r\n      <Icon\r\n        type=\"right\"\r\n        style={{\r\n          fontSize: \"30px\",\r\n          fontWeight: \"bolder\",\r\n          color: \"#333333\",\r\n          textAlign: \"center\",\r\n          fontStyle: \"italic\",\r\n          padding: \"15px\"\r\n        }}\r\n        onClick={() => {\r\n          setOpened(true);\r\n        }}\r\n      />\r\n      <div className=\"icons\">\r\n        <a href=\"www.facebook.com\" target=\"_blank\">\r\n          <Icon type=\"facebook\" style={{ color: \"black\", cursor: \"pointer\" }} />\r\n        </a>\r\n        <a href=\"www.facebook.com\" target=\"_blank\">\r\n          <Icon\r\n            type=\"twitter\"\r\n            style={{ paddingLeft: \"10px\", color: \"black\", cursor: \"pointer\" }}\r\n          />\r\n        </a>\r\n        <a href=\"www.facebook.com\" target=\"_blank\">\r\n          <Icon\r\n            type=\"instagram\"\r\n            style={{ paddingLeft: \"10px\", color: \"black\", cursor: \"pointer\" }}\r\n          />\r\n        </a>\r\n      </div>\r\n      <div  style={{position:\"absolute\" , right:\"0\",padding:\"10px\"}}>\r\n        <img src={logo} style={{ width: \"70px\" }} alt=\"Logo\" />\r\n      </div>\r\n      <div className=\"sidenav\">\r\n        {opened ? (\r\n          <div style={{ height: \"700px\" }} className=\"animated slideInLeft\">\r\n            <SideNav\r\n              setOpen={setOpened}\r\n              navitems={[\"About\", \"Forum\", \"Info\"]}\r\n            />{\" \"}\r\n          </div>\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResponsiveHeader;\r\n","import React, { useState, Fragment,useEffect } from \"react\";\r\nimport { Route, BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Header from \"./Header\";\r\nimport ResponsiveHeader from \"./ResponsiveHeader/ResponsiveHeader\";\r\n\r\nconst WithLayoutRoute = ({ ...props }) => {\r\n  const [state,setState] = useState(true)\r\n  console.log(window.innerWidth);\r\nwindow.onresize= () => setState(!state);\r\n  return (\r\n    <Fragment>\r\n      <div>{(window.innerWidth<700) ? <ResponsiveHeader /> : <Header />}</div>\r\n      <div>\r\n        <Route {...props} />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default WithLayoutRoute;\r\n","import React, { useState } from \"react\";\r\n\r\nconst HomeContainer = () => {\r\n  return <div>Home</div>;\r\n};\r\n\r\nexport default HomeContainer;\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\n// containers\r\nimport WithLayoutRoute from \"../components/layout/WithLayoutRoute\";\r\nimport HomeContainer from \"./homeContainer/HomeContainer\";\r\n\r\nconst RootContainer = ({ history }) => {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <WithLayoutRoute path=\"/\" exact component={HomeContainer} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RootContainer;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Route, BrowserRouter } from \"react-router-dom\";\r\nimport \"animate.css\"\r\n\r\nimport \"./App.css\";\r\n\r\nimport RootContainer from \"./containers/RootContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <BrowserRouter>\r\n      <div>test</div>\r\n        <Route path=\"/\" component={RootContainer} />\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.31b2fc70.jpg\";"],"sourceRoot":""}